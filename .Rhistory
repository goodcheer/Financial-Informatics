getwd()
# Packages to use
packages <- c("quantmod", "PerformanceAnalytics", "TTR", "corrplot", "rpart", "rpart.plot")
?require
for(i in packages){
if(require(i,character.only = T)){
install.packages(i)
}
}
install.packages(i)
install.packages(i)
tickers <- read.csv("SP500Constituent.csv")$Ticker.symbol
tickers <- as.character(tickers)
# Get all ticker's data from 2013-01-01 to 2016-12-31
# you can just load the prepared one because it takes quite a while
load("sp500all.RData")
#
all.vol <- lapply(all.dat, function(x) mean(x[,5], na.rm = T))
View(all.vol)
all.vol.mean <- t(as.data.frame(all.vol))
View(all.vol.mean)
#
all.vol.mean <- lapply(all.dat, function(x) mean(x[,5], na.rm = T))
all.vol.mean <- t(as.data.frame(all.vol))
#    Then order in ascending order
ascend.vol <- order(all.vol.mean)
#     Sample 50 each from different Range of Total Volumes
target.all <- c(all.dat[ascend.vol[40:90]],
all.dat[ascend.vol[140:190]],
all.dat[ascend.vol[240:290]],
all.dat[ascend.vol[340:390]],
all.dat[ascend.vol[440:490]])
#3. Filter by sharpe ratio
mycolnames <- c("Open", "High", "Low", "Close", "Volume", "Adjusted")
target.all <- lapply(target.all, setNames, mycolnames)
View(target.all)
target.all <- lapply(target.all, setNames, mycolnames)
#   Calculate daily Returns of targets
all.dailyReturn <- lapply(target.all, function(x) round(dailyReturn(x$Adjusted, type="arithmetic"),2))
library()
for(i in packages){
if(require(i,character.only = T)){
#install.packages(i)
}
}
#   Calculate daily Returns of targets
all.dailyReturn <- lapply(target.all, function(x) round(dailyReturn(x$Adjusted, type="arithmetic"),2))
View(target.all)
target.all$MLM
#3. Filter by sharpe ratio
mycolnames <- c("Open", "High", "Low", "Close", "Volume", "Adjusted")
target.all <- lapply(target.all, setNames, mycolnames)
target.all$MLM
#   Calculate daily Returns of targets
all.dailyReturn <- lapply(target.all, function(x) round(dailyReturn(x$Adjusted, type="arithmetic"),2))
all.dailyReturn <- do.call("merge",all.dailyReturn)
all.dailyReturn <- na.omit(all.dailyReturn)
#   recent 1 year Sharpe Ratios
all.sharpes <- apply(all.dailyReturn, 2,
function(x) SharpeRatio.annualized(x[length(x)-251:length(x)],Rf = 0))
#    Top 50  absolute sharpe securities
toUse <- rank(abs(all.sharpes)) > 205
targets <- target.all[toUse]
View(targets)
targets[["VAR"]]
# 4. Make indicators
makeIndics <- function(target){
closeprice <- Cl(target)
#Daily Return
daily <- round(dailyReturn(target$Close, type='arithmetic'),3)
daily <- as.vector(daily)
#SMA & LMA
ShMA <- 20; LMA <- 50;
sma <- round(SMA(closeprice, ShMA),1)
sma <- c(NA,head(sma,-1))
lma <- round(SMA(closeprice, LMA),1)
lma <- c(NA,head(lma,-1))
#EMA : Exponential moving average.
ema <- round(EMA(closeprice, 20), 1)
ema <- c(NA,head(ema,-1))
#DEMA : Double-exponential moving average
dema <- round(DEMA(closeprice, 20),1)
dema <- c(NA,head(dema,-1))
#EVWMA : Elastic, volume-weighted moving average.
evwma <- round(EVWMA(closeprice, target$Volume, 20),1)
evwma <- c(NA,head(evwma,-1))
#ZLEMA : Zero lag exponential moving average.
zlema <- round(ZLEMA(closeprice, 20),1)
zlema <- c(NA,head(zlema,-1))
#ALMA : Arnaud Legoux moving average.
alma <- ALMA(closeprice)
alma <- c(NA,head(alma,-1))
#HMA : Hull moving average.
hma <- HMA(closeprice)
hma <- c(NA,head(hma,-1))
#RSI = AU / (AU + AD)
rsi <- round(RSI(closeprice,n=14,maType="WMA"),1)
rsi <- c(NA, head(rsi,-1))
#CMO : The Chande Momentum Oscillator (CMO) is a modified RSI
cmo <- round(CMO(closeprice, n=14),1)
cmo <- c(NA, head(cmo,-1))
#ADX
temp <- ADX(target[,c("High","Low","Close")])
temp <- as.data.frame(temp)
adx <- round(temp$ADX,1)
adx <- c(NA,head(adx,-1))
#CCI : The Commodity Channel Index (CCI) attempts to identify starting and ending trends.
temp <- CCI(target[,c("High","Low","Close")])
temp <- as.data.frame(temp)
cci <- round(temp$cci,1)
cci <- c(NA,head(cci,-1))
volume <- as.vector(target$Volume)
# OBV : On Balance Volume
obv <- OBV(closeprice, volume)
obv <- c(NA, head(obv,-1))
#chaikinAD : The Chaikin Accumulation / Distribution (AD)
temp <- chaikinAD(target[,c("High","Low","Close")], volume)
temp <- as.data.frame(temp)
cAD <- round(temp$temp,1)
cAD <- c(NA, head(cAD,-1))
indics <- data.frame(rsi, sma, lma, adx, alma, cci, cmo, dema,
ema, evwma, hma,zlema, obv, cAD)
rownames(indics) <- index(target)
# check Nas in "indics"
na.indx <- unname(apply(is.na(indics),1, sum) > 0) # rows with more than one NA
# if NAs are consecutive
naIdif <- diff(which(na.indx))
start <- which(na.indx)[length(which(na.indx))] + 1
# since only first 50 observations have NAs, remove them
# to exclude periods without certain indicators
try(if(sum(naIdif != 1) != 0 ){
stop("NAs are not consecutive")}
else{indics <- na.omit(indics)})
dat <- cbind(indics, daily[start:length(daily)])
names(dat)[15] <- "daily"
return(dat)
}
STRPart <- function(df, factorCol, p){
# get levels of factor column
df.lvl <- levels( df[,factorCol])
# seperate by levels
df.classes <- list()
for(i in 1:length(df.lvl)){
df.classes[[i]] <- df[df[,factorCol]==df.lvl[i],]
}
# shuffling
df.classes <- lapply(df.classes, function(x) x[sample(nrow(x)),])
# Stratified Partition
df.train <- lapply(df.classes,FUN = function(x) x[1:round(nrow(x)*p),])
df.train <- do.call("rbind",df.train)
df.test <- lapply(df.classes, FUN = function(x) x[(round(nrow(x)*p)+1):nrow(x),])
df.test <- do.call("rbind",df.test)
return(list(train = df.train, test = df.test))
}
doModel <- function(target, pRat){
# make indicators of target ticker
dat <- makeIndics(target)
indics <- dat[,-15]
daily <- dat[,15]
# Remove no return change (zero)
dat <- subset(dat, daily != 0)
# Make true label
dat$daily <- ifelse(dat$daily > 0, "Up", "Down")
dat$daily <- as.factor(x = dat$daily)
names(dat)[15] <- "Class"
## ------------------------- ##
## Choose 3 indicators Set   ##
## ------------------------- ##
corMat <- cor(indics)
corrplot.mixed(corMat)
# True if abs(correlation) over 0.2
corred <- abs(corMat) > 0.2
# All combinations of 3 variables
indicNames <- rownames(corMat)
varSet <- t(combn(indicNames,m = 3))
colnames(varSet) <- c("v1","v2","v3")
# Correlated item list
related <- function(corrMatrix){
r <- list()
vars <- rownames(corrMatrix)
for(i in 1:length(vars)){
r[[paste0(vars[i])]] <- vars[corrMatrix[i,]]
}
return(r)
}
mylist <- related(corred)
# Find out sets with no correlated variables
f1 <- apply(varSet,1, function(x) !(x[2] %in% mylist[[x[1]]]))
varSet2 <- varSet[f1,]
f2 <- apply(varSet2,1, function(x) !(x[3] %in% mylist[[x[1]]]))
varSet3 <- varSet2[f2,]
f3 <- apply(varSet3,1, function(x) !(x[2] %in% mylist[[x[3]]]))
varSet4 <- varSet3[f3,]
varSet <- varSet4
cat("Generate ", nrow(varSet)," Models\n")
dt.set <- STRPart(dat, ncol(dat), pRat)
## --------------------------- ##
## Model Generation            ##
## --------------------------- ##
dt.models <- list()
# models
for(i in 1:nrow(varSet)){
dt.models[[i]] <- rpart(Class~., data = dt.set$train[,c(varSet[i,],"Class")], method="class")
}
# predicts
pred.test <- lapply(dt.models, function(x) predict(x, newdata = dt.set$test[,-15], type= "class"))
# confusion matrix
true.test <- dt.set$test[,15]
cm.test <- lapply(pred.test, function(x) table(x, true.test))
# accuracy calcuation
acc.test <- unlist(lapply(cm.test, function(x) sum(diag(x))/sum(x)))
# Returns a model with best test accuracy, randomly stratified dataset, and test accuracy of the model
return(list(model = dt.models[[which.max(acc.test)]],
data = dt.set,
acc.test = max(acc.test)))
}
View(target.all)
head(target.all$MLM)
# Use models with over (lambda=0.57) accuracy
modelUse <- unlist(lapply(targets.model, function(x) x$acc.test > 0.57 ))
assess <- names(finalModel)
# ---------------------------#
# BackTesting                #
# ---------------------------#
load("finalModels.RData")
# ---------------------------#
# BackTesting                #
# ---------------------------#
assess <- names(finalModel)
# sec is ticker of securtiy (character)
backtest <- function(sec){
t <- target.all[[sec]] # set OHLCVA data
t.model <- finalModel[[sec]]$model # set final model of the security
t.data <- makeIndics(t) # make indicators of the security
names(t.model$variable.importance)
t.pred <- predict(t.model, newdata = t.data[,-15], type="class") # make predictions
t.signal <- ifelse(t.pred == "Up", 1, -1) # make signals based on predictions
# null means utilizing no strateges at all. Just buy at the starting period and sell at the ending period
t.nullreturn <- data.frame(return = t.data$daily)
t.nullreturn <- xts(x = t.nullreturn, order.by = as.POSIXct(rownames(t.data)))
# my model's daily return
t.myreturn <- data.frame(return = t.data$daily * t.signal)
t.myreturn <- xts(x = t.myreturn, order.by = as.POSIXct(rownames(t.data)))
AR.port <- table.AnnualizedReturns(t.myreturn) # Annualized Returns of my model
AR.null <- table.AnnualizedReturns(t.nullreturn)# Annualized Returns of null
Drdwn <- table.Drawdowns(t.myreturn) # DrawDowns of my model
vR <- VaR(t.myreturn) ## worst scenario loss of my model
Rcum <- Return.cumulative(t.myreturn) # Cumulative Return of my model
chart.Summary.port <- function(){charts.PerformanceSummary(t.myreturn)} # summary on my model
chart.Summary.null <- function(){charts.PerformanceSummary(t.nullreturn)} # summary on null
hitratio <- sum(t.myreturn > 0) / dim(t.myreturn)[1] # hit ratio of my model
return(list(AR.port = AR.port, AR.null = AR.null,
table.Drawdown = Drdwn, VaR = vR, Return.cum = Rcum, hitRatio= hitratio,
chart.Summary.port = chart.Summary.port, chart.Summary.null = chart.Summary.null))
}
reports <- lapply(assess, backtest)
names(reports) <- assess
# Compare Annualized Returns
ARS.port <- do.call(cbind, lapply(reports, function(x) x$AR.port))
colnames(ARS.port) <- assess
ARS.null <- do.call(cbind, lapply(reports, function(x) x$AR.null))
colnames(ARS.null) <- assess
ARS.compr <- as.matrix(ARS.port) - as.matrix(ARS.null)
View(ARS.compr)
ARS.compr <- as.matrix(ARS.port)[1,] - as.matrix(ARS.null)[1,]
View(ARS.compr)
as.matrix(ARS.port)[1,]
ARS.compr <- t(as.matrix(ARS.port)[1,] - as.matrix(ARS.null)[1,])
View(ARS.compr)
View(ARS.compr)
require(TTR)
!require(TTR)
for (i in packages){
if(!require( i , character.only = TRUE))
{install.packages(i, dependencies = TRUE)}
}
class(tickers)
typeof(tickers)
mode(tickers)
is.vector
methods(is.vector)
is.vector.default
class(all.dat)
class(all.vol.mean)
class(ascend.vol)
ascend.vol
class(target.all)
dim(tickers)
length(tickers)
length(all.dat)
length(all.vol.mean)
length(ascend.vol)
length(target.all)
class(all.dailyReturn)
length(all.dailyReturn)
dim(all.dailyReturn)
class(all.sharpes)
View(all.sharpes)
length(all.sharpes)
View(all.dailyReturn)
View(targets)
View(targets.model)
Class(finalModel)
class(finalModel)
length(finalModel)
length(reports)
class(ARS.port)
dim(ARS.port)
ARS.port
a = c(rsi, sma, lma, adx, alma, cci, cmo, dema,
ema, evwma, hma,zlema, obv, cAD)
View(ARS.compr)
View(ARS.port)
View(ARS.null)
